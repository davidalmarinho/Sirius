=> Gráficos modernos
É dividido por 6 etapas, vertex shader, shape assembly, geometry shader, rayterization, fragment
shader e test & blending

- Vertex Shader [estritamente programável]:
Este é programado por nós.
Nesta parte, basicamente, definimos os pontos dos vértices da nossa forma.
Mas como fazemos isso? Muito simples, porém difícil.
Precisamos da intervenção do VAO.
    VAO (Vertex array object) => Guardamos elementos, como a posição da forma (vértices),
a cor, a textura... Os dados de cada um destes atributos, são chamados de VBOs
(Vertex buffer object)... E a ordem pela qual vamos desenhar os vértices, ou seja, o EBO
(Element Buffer Object). Devemos sempre selecionar os vértices de acordo com o sentido contrário
dos ponteiros do relógio.
Resumindo:
 _____________________
| VAO:                |
|  Atributo1 (aPos)   | → VBO das posições
|  Atributo2 (aColor) | → VBO das cores
|_____________________|

Sendo este o nosso quadrado:       1__________2
                                   |          |
                                   |          |
                                   |__________|
                                   3          4

                                   EBO: [4, 2, 1, 4, 3, 1] Porque temos de desenhar por triângulos

- Shape assembly [CPU trata disto]:
Responsável por conectar os vértices.

- Geometry shader [programável]:
Trata das formas. Normalmente, como costumamos importar os modelos / sprites, este não
precisa de ser programado, mas quando queremos, por exemplo, fazer a animação 3d
de um oceano ou outros casos mais específicos, precisaremos de programar este.

- Rayterization [CPU trata disto]:
Converter a área rodeada pelos vértices em píxeis.

- Fragment shader [estritamente programável]:
Trata da atribuição das cores.

- Test & blending
Testes e isso, basicamente para debug. Acabamos por programá-lo, uma vez que é tipo
a fase final.

-------- Escrevendo Java --------
VAO:
    glGenVertexArrays();
        Gera o vaoID.
    glBindVertexArray(int vaoID);
        Engatar / carregar o vao para o CPU.

VBO:
    glGenBuffers();
        Gerar o vboID.
    glBindBuffer(GL_ARRAY_BUFFER, int vboID);
        Engatar / carregar o vbo para o CPU.
    glBufferData(GL_ARRAY_BUFFER, int size, GL_STATIC_DRAW / GL_DYNAMIC_DRAW);
        Especificar o tipo de dados que vão entrar no CPU
            {
                size            → memória usada para os vértices
                GL_STATIC_DRAW  → para quando não alteramos os dados dos vértices de batch para batch
                GL_DYNAMIC_DRAW → para quando alteramos os dados dos vértices de batch para batch
            }
    glBufferSubData(GL_ARRAY_BUFFER, int offset, float[] data);
        Altera dados já alocados na memória pelo glBufferData.
            {
                offset → Em que indíce queremos começar a trocar os valores
                data   → Dados que queremos alterar, como os  vértices
            }

EBO:
    glGenBuffers();
        Gerar o eboID.
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, int eboID);
        Engatar / carregar o ebo para o CPU
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, int size, GL_STATIC_DRAW);
        Especificar o tipo de dados que vão entar no CPU

Atributos:
    glVertexAttribPointer();
        Indicar onde o programa vai buscar os dados respetivos para o atributo desejado
    glEnableVertexAttribArray(int index);
        Ativar o respetivo atributo
